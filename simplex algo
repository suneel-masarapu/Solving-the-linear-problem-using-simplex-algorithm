
import copy

def input_func(file_name):
    objective = ""
    A = []
    b = []
    constraints = []
    c = []
    with open(file_name, "r") as file:
        p = -1
        for line in file:
            k = line.strip()
            if k == "[objective]":
                p = 0
            elif p == 0:
                objective = k 
                p = 1
            elif k == "[A]":
                p = 2 
            elif p == 2 and k != "[b]" and k:
                row = [float(x.strip()) for x in k.split(",")]
                A.append(row)
            elif k == "[b]":
                p = 3
            elif p == 3 and k != "[constraint_types]" and k:
                b.append(float(k))
            elif k == "[constraint_types]":
                p = 4
            elif p == 4 and k != "[c]" and k:
                constraints = constraints + [k]
            elif k == "[c]":
                p = 5
            elif p == 5 and k:
                c = [float(x.strip()) for x in k.split(",")]
                p = 6
            elif (p==6 ):
                break
    return objective, A, b, constraints, c

def adding_slack(A,b,constraint,c) :
    for i in range(len(constraint)) :
        if(constraint[i] == '>=') :
            c = c +[0]
            for j in range(len(A)) :
                if j == i :
                    A[j] = A[j] + [-1]
                else :
                    A[j] = A[j] + [0]
        elif (constraint[i] == '<=') :
           c = c+[0]
           for j in range(len(A)) :
                if j == i :
                    A[j] = A[j] + [1]
                else :
                    A[j] = A[j] + [0]
    for i in range(len(b)) :
        if b[i] < 0 :
            for j in range(len(A[0])):
                A[i][j] = A[i][j] * -1
    return c


def adding_artificial(A, b):
    initial_tableau = []
    bases = [len(A[0])]
    costs = []
    k = 0
    for i in b:
        k = k + i
    costs = costs + [k*-1]
    for i in range(len(A[0])):
        k = 0
        bases = bases + [0]
        for j in range(len(b)):
            k = k + A[j][i]
        costs = costs + [k*-1]
    for i in range(1, len(A) + 1):
        costs = costs + [0]
        bases = bases + [i]
    initial_tableau = initial_tableau + [costs]
    for i in range(len(A)):
        p = [b[i]]
        for j in range(len(A[0])):
            p = p + [A[i][j]]
        for j in range(len(A)):
            if j == i:
                p = p + [1]
            else:
                p = p + [0]
        initial_tableau = initial_tableau + [p]
    return initial_tableau, bases
    
def solving(initial_tableau,basis) :
    n = -1
    for i in range(1,len(initial_tableau[0])):
        if initial_tableau[0][i] < 0:
            n=i
            break
    if(n == -1):
        return (initial_tableau,"optimal",basis)
    m = len(initial_tableau)
    k = -1
    for i in range(1,m):
        if(initial_tableau[i][n] > 0 and k == -1) :
            k = i
        elif(initial_tableau[i][n] > 0 and k != -1) :
            if(initial_tableau[k][0] / initial_tableau[k][n] >  initial_tableau[i][0]/initial_tableau[i][n]) :
                k = i
    if(k == -1) :
        return (initial_tableau,"unbounded",basis)
    l = k
 
    for i in range(1,len(basis)):
        if basis[i] == l :
            basis[i] = 0
            break
    basis[n] = l
    temp = initial_tableau[l][n]
    
    for i in range(len(initial_tableau[l])) :
        initial_tableau[l][i] = float(initial_tableau[l][i])/float(temp)
    for i in range(m) :
        temp1 = initial_tableau[i][n]
        if i != l :
            for j in range(len(initial_tableau[l])) :
                initial_tableau[i][j] = float(initial_tableau[i][j])-float(initial_tableau[l][j])*float(temp1)
   
    return solving(initial_tableau,basis)

def rank_elements(lst):
    # Remove zeros from the list
    non_zero_lst = [x for x in lst if x != 0]
    # Sort the list
    sorted_lst = sorted(non_zero_lst)
    # Create a dictionary to store ranks
    ranks = {}
    rank = 1
    for elem in sorted_lst:
        if elem not in ranks:
            ranks[elem] = rank
            rank += 1
    # Assign rank 0 to zero values
    for elem in lst:
        if elem == 0:
            ranks[elem] = 0
    return [ranks[elem] for elem in lst]
    
def print_matrix(initial_tableau):
    for i in range(len(initial_tableau)):
        row = []
        for j in range(len(initial_tableau[i])):
            row.append(float(initial_tableau[i][j]))
        print(row)

def removing_artificials(initial_tableau,bases) :
    row_to_remove = []
    for i in range(bases[0]+1,len(bases)) :
        if(bases[i] != 0) :
            temp = -1
            for j in range(1,bases[0]+1) :
                if initial_tableau[bases[i]][j] != 0 :
                    bases[j] = bases[i]
                    temp = 0
                    temp1 = initial_tableau[bases[i]][j]
                    for k in range(len(initial_tableau[0])) :
                        initial_tableau[bases[i]][k] = initial_tableau[bases[i]][k]/temp1
                    for k in range(len(initial_tableau)) :
                        if k != bases[i] :
                            temp2 = initial_tableau[k][j]
                            for l in range(len(initial_tableau[0])) :
                                initial_tableau[k][l] = initial_tableau[k][l] - initial_tableau[bases[i]][l]*temp2
                break
            if temp == -1 :
                row_to_remove = row_to_remove + [bases[i]]
    poped = 0
    for i in row_to_remove :
        initial_tableau.pop(i-poped)
        poped = poped+1
    for i in range(len(initial_tableau)) :
        del initial_tableau[i][bases[0]+1:]
    bases = [bases[0]]+rank_elements(bases[1:bases[0]+1])
    return(initial_tableau,bases)

def cost_factors(initial_tablue,c,basis) :
    cost = 0
    for i in range(1,len(basis)) :
        if basis[i] != 0 :
            cost = (initial_tablue[basis[i]][0])*c[i] + cost
    initial_tablue[0][0] = (-1)*cost
   
    
    for i in range(1,len(initial_tablue[0])) :
      
        reduced_cost  = c[i]
        for j in range(1,len(basis)) :
         
            if basis[j] != 0:
                reduced_cost = reduced_cost - c[j]*initial_tablue[basis[j]][i]
        initial_tablue[0][i] = reduced_cost

def final_tab(initial) :
    k = copy.deepcopy(initial)
    del k[0]
    for i in range(len(initial)-1) :
        del k[i][0]
    return k

def get_sol(initial,basis) :
    k = []

    for i in range(1,len(basis)) :
        if basis[i] == 0 :
            k = k + [0]
        
        else :
            
            k = k + [initial[basis[i]][0]]
    return k

def simplex_algo(file_name) :
    objective,A,b,constraints,c = input_func(file_name)
    if objective == 'maximum' :
        for i in range(len(c)) :
            c[i] = c[i]*-1
    c = adding_slack(A,b,constraints,c)
    
    c = [0] + c

    initial = adding_artificial(A,b)

    initial_tableau = copy.deepcopy(initial)

    q = solving(initial[0],initial[1])
    if(q[0][0][0]!=0) :
        return {
        "initial_tableau":"" ,
        "final_tableau": final_tab(q[0]),
        "solution_status": "infeasible",
        "optimal_solution": get_sol(initial[0], initial[1]),
        "optimal_value": initial[0][0][0]
    }

    initial = removing_artificials(q[0],q[2])
   
    cost_factors(initial[0],c,initial[1])
    
    final = solving(initial[0],initial[1])
    x = copy.deepcopy(final)
    print_matrix(x[0])
    return{
        "initial_tableau": initial_tableau,
        "final_tableau": final_tab(final[0]),
        "solution_status": final[1],
        "optimal_solution": get_sol(x[0], x[2]),
        "optimal_value": q[0][0][0]
    }
k = "input.txt"
print(simplex_algo(k))
